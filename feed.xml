<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wyman的技术博客</title>
    <description>博主主要学习方向：图形学、机器学习，以及各种有趣的数学。联系QQ：234707482。</description>
    <link>http://www.qiujiawei.com</link>
    <atom:link href="http://www.qiujiawei.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>微分几何与渲染(1)</title>
        <description>&lt;!--more--&gt;

&lt;h2&gt;参数坐标——uv坐标系&lt;/h2&gt;

&lt;p&gt;在ComputerGraphics(CG)中，一般称纹理坐标是uv坐标，但其实uv坐标还有别的用处，例如下文将介绍的微分几何方程。&lt;/p&gt;

&lt;p&gt;既然被叫做uv坐标，那么它只有2个变量，但要注意，uv坐标和初中课本里面的xy坐标是不一样的，uv坐标可以用在&lt;strong&gt;曲面和平面&lt;/strong&gt;，而xy坐标只能处理平面。&lt;/p&gt;

&lt;p&gt;举个好理解的例子：一个完整的Sphere的uv坐标是什么呢？首先，定义一个球需要2个信息：球心坐标\( \vec o \)和半径r。&lt;/p&gt;

&lt;p&gt;接着，对于球面上某个点，要怎么表示呢？中学几何课本里会这样子写：&lt;/p&gt;

&lt;p&gt;\[ x^ 2 + y^ 2 + z^ 2 = r^ 2  \]&lt;/p&gt;

&lt;p&gt;则有：&lt;/p&gt;

&lt;p&gt;\[ p = (\vec o, r, x, y, z) \]&lt;/p&gt;

&lt;p&gt;参数可以进一步，第一个方法是应用球坐标系（Spherical coordinate），即用2个角\(\theta \)、\(\phi \)定位球面上的一个点：&lt;/p&gt;

&lt;p&gt;\[ p = (\vec o, r, \theta, \phi ) ， 0 \leq \theta \leq π， 0 \leq \phi \leq 2π  \]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017.3/1.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;这些球面点当然也有uv坐标表示法：&lt;/p&gt;

&lt;p&gt;\[ p = (\vec o, r, u, v ) \]&lt;/p&gt;

&lt;p&gt;可以看到， θφ坐标和uv坐标都是可以表示曲面上的点的，而且都是2个变量，所以它们之间存在某种转换关系：&lt;/p&gt;

&lt;p&gt;\[ u=sinθcosϕ \]
\[ v=sinθsinϕ \]&lt;/p&gt;

&lt;p&gt;因为θ、φ是线性无关的，那么uv的取值范围为：&lt;/p&gt;

&lt;p&gt;\[ -1 \leq u \leq 1， -1 \leq v \leq 1 \]&lt;/p&gt;

&lt;p&gt;这个取值范围可以做一下转换，去掉负数：&lt;/p&gt;

&lt;p&gt;\[ u&amp;#39; = \frac {1}{2}(u + 1),   0 \leq u&amp;#39; \leq 1 \]&lt;/p&gt;

&lt;p&gt;\[ v&amp;#39; = \frac {1}{2}(v + 1),   0 \leq v&amp;#39; \leq 1 \]&lt;/p&gt;

&lt;p&gt;另外，当uv坐标作为纹理坐标时，uv坐标的取值范围是 \( 0 \leq u \leq 1 \)，\( 0 \leq v \leq 1 \)。&lt;/p&gt;

&lt;h2&gt;三角面片中的偏微分方程&lt;/h2&gt;

&lt;p&gt;每个mesh都是由有限数量的三角面片(下文简称Tri)组成，在渲染过程中，处理一个Tri和处理一堆Tri是一样的算法，所以只要解决单个Tri的渲染问题，就能渲染复杂的mesh。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017.3/3.png&quot; alt=&quot;3.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;假设上面这个图里的三角形表示mesh中的一个三角面片，三个顶点分别为：&lt;/p&gt;

&lt;p&gt;\[ \vec p_{0} = (x_{0}, y_{0}, z_{0}) \]&lt;/p&gt;

&lt;p&gt;\[ \vec p_{1} = (x_{1}, y_{1}, z_{1}) \]&lt;/p&gt;

&lt;p&gt;\[ \vec p_{2} = (x_{2}, y_{2}, z_{2}) \]&lt;/p&gt;

&lt;p&gt;虽然是三维的面片(顶点坐标有3个分量)，但我们可以把这个Tri想象成在一个二维空间里，并且设想这个二维平面上有一个原点\( \vec p_{o} \)(o代表origin), \( \vec p_{o} \)和Tri的相对位置取决于Tri三个顶点的uv坐标值。&lt;/p&gt;

&lt;p&gt;既然有了 \( \vec p_{o} \)，就可以用方程表示三个顶点了：&lt;/p&gt;

&lt;p&gt;\[ \vec p_{0} = \vec p_{o} + u_{0}\frac { \partial \vec p }{ \partial u } + v_{0}\frac { \partial \vec p }{ \partial v } \]&lt;/p&gt;

&lt;p&gt;\[ \vec p_{1} = \vec p_{o} + u_{1}\frac { \partial \vec p }{ \partial u } + v_{1}\frac { \partial \vec p }{ \partial v } \]&lt;/p&gt;

&lt;p&gt;\[ \vec p_{2} = \vec p_{o} + u_{2}\frac { \partial \vec p }{ \partial u } + v_{2}\frac { \partial \vec p }{ \partial v } \]&lt;/p&gt;

&lt;p&gt;这3个方程里总共有3个未知量：\( \vec p_{o}、\frac { \partial \vec p }{ \partial u }、\frac { \partial \vec p }{ \partial v } \)。\( \vec p_{o} \)是可以消去的，后面的2个偏微分才是我们要求出来的。&lt;/p&gt;

&lt;p&gt;要求这2个偏微分，需要先列出2个方程以便消去\( \vec p_{o} \)：\( \vec p_{0} - \vec p_{2} 、 \vec p_{1} - \vec p_{2} \)：&lt;/p&gt;

&lt;p&gt;\[ \vec p_{0} - \vec p_{2} = (u_{0} - u_{2})\frac { \partial \vec p }{ \partial u } +  (v_{0} - v_{2})\frac { \partial \vec p }{ \partial v } \]&lt;/p&gt;

&lt;p&gt;\[ \vec p_{1} - \vec p_{2} = (u_{1} - u_{2})\frac { \partial \vec p }{ \partial u } +  (v_{1} - v_{2})\frac { \partial \vec p }{ \partial v } \]&lt;/p&gt;

&lt;p&gt;然后把这2个方程写成矩阵乘法的形式：&lt;/p&gt;

&lt;p&gt;\[  \left[ \begin{matrix} u_{0} - u_{2}&amp;amp;  v_{0} - v_{2}\\   u_{1} - u_{2}&amp;amp;  v_{1} - v_{2}\\ \end{matrix} \right]  \left[ \begin{matrix} \frac { \partial \vec p }{ \partial u }\\   \frac { \partial \vec p }{ \partial v }\\ \end{matrix} \right] =  \left[ \begin{matrix}  \vec p_{0} - \vec p_{2} \\   \vec p_{1} - \vec p_{2}\\ \end{matrix} \right] \]&lt;/p&gt;

&lt;p&gt;再根据矩阵初级变换，有：&lt;/p&gt;

&lt;p&gt;\[  \left[ \begin{matrix} \frac { \partial \vec p }{ \partial u }\\   \frac { \partial \vec p }{ \partial v }\\ \end{matrix} \right] =  \left[ \begin{matrix} u_{0} - u_{2}&amp;amp;  v_{0} - v_{2}\\   u_{1} - u_{2}&amp;amp;  v_{1} - v_{2}\\ \end{matrix} \right] ^{-1}  \left[ \begin{matrix}  \vec p_{0} - \vec p_{2} \\   \vec p_{1} - \vec p_{2}\\ \end{matrix} \right] \]&lt;/p&gt;

&lt;p&gt;再根据二阶矩阵的逆矩阵公式：&lt;/p&gt;

&lt;p&gt;\[ A =  \left[ \begin{matrix} a&amp;amp; b\\  c&amp;amp; d\\ \end{matrix} \right] \]&lt;/p&gt;

&lt;p&gt;\[ A^{-1} = \frac {1}{ad - bc}  \left[ \begin{matrix} d&amp;amp; -b\\  -c&amp;amp; a\\ \end{matrix} \right] \]&lt;/p&gt;

&lt;p&gt;上式的逆矩阵可以变成：&lt;/p&gt;

&lt;p&gt;\[  \left[ \begin{matrix} u_{0} - u_{2}&amp;amp;  v_{0} - v_{2}\\   u_{1} - u_{2}&amp;amp;  v_{1} - v_{2}\\ \end{matrix} \right] ^{-1} = \frac {1}{(u_{0} - u_{2})(v_{1} - v_{2}) - (v_{0} - v_{2})(u_{1} - u_{2})}   \left[ \begin{matrix} v_{1} - v_{2}&amp;amp; -(v_{0} - v_{2})\\  -(u_{1} - u_{2})&amp;amp; u_{0} - u_{2}\\ \end{matrix} \right] \]&lt;/p&gt;

&lt;p&gt;总结一下：3维空间中，某3个不同顶点组成的三角平面上的任意点\( \vec p \)关于u、v的偏微分的值完全一致，且可以通过三个顶点的xyz坐标和uv坐标求得。&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://www.qiujiawei.com/partial-derivatives/</link>
        <guid isPermaLink="true">http://www.qiujiawei.com/partial-derivatives/</guid>
      </item>
    
      <item>
        <title>forwarder概况</title>
        <description>&lt;p&gt;5个月没更新博客，是因为这段时间主要用在开发forwarder。forwarder是因为工作需要而开发的一个工具，它统一了游戏前后端之间、后端各个服务之间的通信，目前forwarder不仅已经通过了初步的压力和稳定性测试，并且已经在项目中发挥了实际作用。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;目前成果&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;已经实现两种通信模式：enet(udp)和websocket(http based tcp)的一键切换&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们一开始用了websocket来实现服务端和客户端之间的通信。服务端架构做深入后，涌现了复杂的多服务器间通信的需求，为求快速开发，我们用上了npm上的一个websocket库，这样前后端、后端之间的通信模式就统一了：js + websocket。但是这个websocket库偶而会出现一个莫名其妙的error，第三方库的原因，修复无望，也不想死磕这个websocket，于是发现了新的方案：enet。&lt;/p&gt;

&lt;p&gt;enet是一个神奇的库，它把udp通信做了一层封装，使得通过enet通信，不仅可以发不可靠的udp，也可以发可靠的udp，使得通过udp也可以做网游（作者似乎也是某个游戏公司的）。&lt;/p&gt;

&lt;p&gt;更重要的是，tcp相比udp，有一个缺点，在网络状况不好时，tcp表现得很差，原因是RTO（Retransmission TimeOut)重传定时器跟不上RTT（Round Trip Time）的变化（这也是tcp的故意设计）。具体细节推荐这篇文章：&lt;a href=&quot;http://blog.csdn.net/heiyeshuwu/article/details/46402517&quot;&gt;TCP超时重传机制探索&lt;/a&gt;。RTO过高时，延迟就会变大，对有实时联网战斗的游戏是致命的。&lt;/p&gt;

&lt;p&gt;除了可靠性，enet还有很多features：有序、连接管理、带宽控制、跨平台等，都是无缝地从tcp通信切换到enet通信的有利条件。&lt;/p&gt;

&lt;p&gt;但我们项目如果要切换到enet还有很多问题，例如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我们的web版客户端无法嵌入enet库（因为浏览器不支持），即使服务端支持了enet，web客户端也无法与之建立通信&lt;/li&gt;
&lt;li&gt;websocket在浏览器的js、spidermonkey的js、node.js（npm有现成的库），都算是内置的功能，但enet就需要我们自行解决这些平台问题了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，forwarder的就油然而生了，forwarder对通信方式做了一层简单的抽象，把enet亦或者websocket都隐藏了，使得通过forwarder做通信时，不需要太关心通信方式细节。&lt;/p&gt;

&lt;p&gt;对于上面第一个问题就有了解决方案，服务端只需要开放2个访问端口，一个tcp(websocket)、一个udp(enet)，前者给web客户端连接，后者给支持enet的客户端连接，例如手机端、PC端。forwarder收到websocket线路来的包时，也交给enet线路的packer_handler处理就可以了，发包接口也类似。&lt;/p&gt;

&lt;p&gt;第二个问题的处理就是写driver，forwarder对收发的packet包一层scheme，用于做加密等功能，而web端既然无法使用forwarder的代码，那么就只能写一个scheme parser和一套简易的forwarder-js接口，实现解包、压包；node.js的话也实现了一个&lt;a href=&quot;https://www.npmjs.com/package/forwarder-node&quot;&gt;forwarder-node&lt;/a&gt;了；而spidermonkey或者说cocos2d-x中的spidermonkey，我也写了一套driver用于项目中。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;动态长度header，支持加密、压缩、base64、ip查询&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;加密使用了AES算法，密钥要求128位；压缩使用了zlib库；动态长度header是指，在不开启任何功能时，单个packet的header最少需要8个字节，根据开启的flag，header会动态增长。（初期写了固定长度的header，发现很不好使，中间重构了一遍）&lt;/p&gt;

&lt;h3&gt;以后计划&lt;/h3&gt;

&lt;p&gt;目前forwarder也比较稳定，可以使用了，开发速度将放缓。我也想把时间留给学习和写blog。&lt;/p&gt;

&lt;p&gt;forwarder目前剩下要做的大概就是几点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;完善API&lt;/li&gt;
&lt;li&gt;写好document&lt;/li&gt;
&lt;li&gt;实现新的通信模式：纯粹的tcp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第1点急不来，完美的接口需要长期的打磨；第2点主要是我懒的问题；第3点重要但不紧急，毕竟在web端只能用websocket做长连接，而手机端有更舒服的enet保驾护航。&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://www.qiujiawei.com/forwarder-progress/</link>
        <guid isPermaLink="true">http://www.qiujiawei.com/forwarder-progress/</guid>
      </item>
    
      <item>
        <title>forwarder开发备忘</title>
        <description>&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/voyagingmk/forwarder&quot;&gt;https://github.com/voyagingmk/forwarder&lt;/a&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1&gt;cmake&lt;/h1&gt;

&lt;h3&gt;1.windows下安装cmake&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://cmake.org/files/v3.7/cmake-3.7.0-rc1-win64-x64.msi&quot;&gt;https://cmake.org/files/v3.7/cmake-3.7.0-rc1-win64-x64.msi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;顺便可以下载cmake源码，源码里面有一个tests目录，有很多cmake工程可以参考，譬如官网的tutorials教程的代码都在tests里面了。&lt;/p&gt;

&lt;h3&gt;2.手写CMakeLists.txt&lt;/h3&gt;

&lt;p&gt;本文不谈cmake-gui的使用，原因是这东西界面有点怪，其次是cmake作为跨平台的构建系统，理应学习使用cmake的命令行模式，命令都是一致的，而cmake-gui是windows独有的。&lt;/p&gt;

&lt;p&gt;那么，在执行cmake构建指令前，需要在forwarder项目根目录下手写一个CMakeLists.txt文件。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;# 注：这个个CMakeLists.txt在将来的版本中会发生改动。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cmake_minimum_required&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwarder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# The version number.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FORWARDER_VERSION_MAJOR&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FORWARDER_VERSION_MINOR&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;include_directories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;${PROJECT_SOURCE_DIR}/include&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;include_directories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;${PROJECT_SOURCE_DIR}/enet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_subdirectory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXTRA_LIBS&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXTRA_LIBS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libenet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# add the executable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_executable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwarder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target_link_libraries&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwarder&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXTRA_LIBS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（这里推荐用vscode来编辑CMakeLists.txt，vscode有编辑CMakeLists.txt文件的插件，支持语法高亮和智能提示，很爽）&lt;/p&gt;

&lt;h3&gt;3.构建&lt;/h3&gt;

&lt;p&gt;forwarder项目目前用到了3个第三方库：enet、spdlog、rapidjson。&lt;/p&gt;

&lt;p&gt;spdlog和rapidjson是头文件形式的第三方库，直接把头文件放到include就可以了。&lt;/p&gt;

&lt;p&gt;enet则打算用静态链接的方式引入。需要建一个子目录&lt;strong&gt;enet&lt;/strong&gt;，然后添加enet的所有c文件、CMakeLists.txt。&lt;/p&gt;

&lt;p&gt;（其实可以把enet整个源码文件夹搬进来，不过我为了forwarder的东西更少些，所以只添加了enet的c文件和CMakeLists.txt）&lt;/p&gt;

&lt;p&gt;enet的CMakeLists.txt是作为根目录CMakeLists.txt的孩子存在的，由根目录的CMakeLists.txt来调用。&lt;/p&gt;

&lt;p&gt;有了这2个个CMakeLists.txt后，在根目录新建一个文件夹叫build，然后cmd进入这个目录，并执行：&lt;/p&gt;

&lt;p&gt;cmake ..&lt;/p&gt;

&lt;p&gt;就会自动在build目录生成visual studio项目，启动forwarder.sln，点生成解决方案，如果没报错，就说明构建成功了。&lt;/p&gt;

&lt;h1&gt;docker&lt;/h1&gt;

&lt;p&gt;用docker来测试forwarder在linux系统下的运行情况，非常方便。&lt;/p&gt;

&lt;h3&gt;1.首先windows安装docker：&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.docker.com/products/overview&quot;&gt;https://www.docker.com/products/overview&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;2.然后设置share目录：&lt;/h3&gt;

&lt;p&gt;docker安装完毕后在任务栏会有一个图标，右键然后点setting：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.10/11.png&quot; alt=&quot;11.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.10/10.png&quot; alt=&quot;10.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;注意红圈的内容，提示了我们开启share目录后，怎么在docker中用（其实就是-v指令）。&lt;/p&gt;

&lt;h3&gt;3.然后在cmd中执行：&lt;/h3&gt;

&lt;p&gt;docker run --rm -it -v D:\workplace\project\forwarder:/data ubuntu:latest&lt;/p&gt;

&lt;p&gt;run代表启动一个container；&lt;/p&gt;

&lt;p&gt;最后的参数ubuntu:latest代表使用ubuntu的最新版本镜像(image)&lt;/p&gt;

&lt;p&gt;其中的-rm作用是exit时会自动删除这个container；&lt;/p&gt;

&lt;p&gt;-it作用是设置成交互模式(interactive)；&lt;/p&gt;

&lt;p&gt;-v D:\workplace\project\forwarder:/data，是把windows的共享目录D:\workplace\project\forwarder 映射到container中的/data目录。&lt;/p&gt;

&lt;p&gt;第一次执行时，会从docker官方服务器下载ubuntu:latest镜像到本地，所以会比较慢。&lt;/p&gt;

&lt;p&gt;执行成功后，就进入这个临时生成的ubuntu的控制台啦！&lt;/p&gt;

&lt;h3&gt;4.在ubuntu中构建forward&lt;/h3&gt;

&lt;p&gt;第三步建立的ubuntu镜像不是持久化的，需要永久保存的镜像的话，需要自行写Dockerfile。&lt;/p&gt;

&lt;p&gt;在forwarder根目录下的docker目录我已经写了一个。cmd进入这个目录并执行：&lt;/p&gt;

&lt;p&gt;docker build -t myubuntu  .&lt;/p&gt;

&lt;p&gt;就开始在本地创建一个自定义的image镜像了。&lt;/p&gt;

&lt;p&gt;如果update太慢，可考虑更换国内的soureces，访问：&lt;a href=&quot;http://wiki.ubuntu.org.cn/%E6%A8%A1%E6%9D%BF:16.04source&quot;&gt;http://wiki.ubuntu.org.cn/%E6%A8%A1%E6%9D%BF:16.04source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;把Dockerfile中的那些sources链接的地址替换成国内的镜像站点即可，例如我替换成阿里云的镜像站点。&lt;/p&gt;

&lt;p&gt;镜像生成完毕后，在任意目录执行命令：&lt;/p&gt;

&lt;p&gt;docker run --rm -it -v D:\workplace\project\forwarder:/data myubuntu&lt;/p&gt;

&lt;p&gt;此时，进入的ubuntu只是一个临时的无持久化的系统，若你修改了这个系统下的东西，exit退出后再执行上面的命令进入ubuntu，是不会看到之前的修改的。&lt;/p&gt;

&lt;p&gt;这个特性很适合用来做开发测试，保证了测试环境不会被轻易破坏掉。&lt;/p&gt;

&lt;h3&gt;5.apt-get的一些技巧&lt;/h3&gt;

&lt;p&gt;查询一个包的版本列表：&lt;/p&gt;

&lt;p&gt;apt-cache policy &lt;package name&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://www.qiujiawei.com/forwarder-buildsystem/</link>
        <guid isPermaLink="true">http://www.qiujiawei.com/forwarder-buildsystem/</guid>
      </item>
    
      <item>
        <title>细说红黑树(3)-基本操作之Delete</title>
        <description>&lt;!--more--&gt;

&lt;p&gt;本文争取用精简的文字描述清楚红黑树的各种基本操作：插入、&lt;strong&gt;删除&lt;/strong&gt;、查询。&lt;/p&gt;

&lt;p&gt;在开始下文之前，再次祭出红黑树的四大性质：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;根节点是黑色&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;叶子节点（NULL）视为黑色节点&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果一个节点是红色，那么它的2个孩子节点都是黑色&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于每条从根节点出发、并到达叶子节点的路径，路径上黑色节点的数量一致（叶子节点也计算在内）&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Delete&lt;/h1&gt;

&lt;p&gt;首先，我感到不开心的一件事是，我发现红黑树的删除逻辑之复杂（比Insert还要复杂！），让红黑树变得不那么完美了。不过下文还是会慢慢介绍整个删除算法。&lt;/p&gt;

&lt;p&gt;红黑树的Delete，需要用到一个新的概念：Double-Black，即删除目标节点后，把另一个节点标记为&lt;strong&gt;双黑&lt;/strong&gt;，然后通过把它调整成&lt;strong&gt;单黑&lt;/strong&gt;，从而不破坏红黑树的性质。&lt;/p&gt;

&lt;h1&gt;资料&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/red-black-tree-set-3-delete-2/&quot;&gt;http://www.geeksforgeeks.org/red-black-tree-set-3-delete-2/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://www.qiujiawei.com/redblacktree-3/</link>
        <guid isPermaLink="true">http://www.qiujiawei.com/redblacktree-3/</guid>
      </item>
    
      <item>
        <title>细说红黑树(2)-基本操作之Insert</title>
        <description>&lt;!--more--&gt;

&lt;p&gt;本文争取用精简的文字描述清楚红黑树的各种基本操作：&lt;strong&gt;插入&lt;/strong&gt;、删除、查询。&lt;/p&gt;

&lt;p&gt;在开始下文之前，再次祭出红黑树的四大性质：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;根节点是黑色&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;叶子节点（NULL）视为黑色节点&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果一个节点是红色，那么它的2个孩子节点都是黑色&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于每条从根节点出发、并到达叶子节点的路径，路径上黑色节点的数量一致（叶子节点也计算在内）&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Insert&lt;/h1&gt;

&lt;p&gt;插入操作的第一个准则是，&lt;strong&gt;插入的节点先设置为红色&lt;/strong&gt;，插入后根据插入的节点在树中的&lt;strong&gt;位置&lt;/strong&gt;以及树的&lt;strong&gt;着色状态&lt;/strong&gt;，可以划分出多种情况，这些情况总结如下：&lt;/p&gt;

&lt;p&gt;（注意，在以下所有情况中，在节点插入前红黑树是平衡的，即使从图片上看并不能看出平衡性）&lt;/p&gt;

&lt;p&gt;1.插入的节点是根节点&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.10/2.png&quot; alt=&quot;2.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;显然无需调整红黑树。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2.插入的节点的父节点是&lt;strong&gt;黑&lt;/strong&gt;色&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.10/3.png&quot; alt=&quot;3.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;插入红节点，并不影响性质4。无需调整红黑树。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;3.插入的节点的父节点是&lt;strong&gt;红&lt;/strong&gt;色&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3a.叔节点（即父节点的兄弟节点）也是&lt;strong&gt;红&lt;/strong&gt;色&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这种情况下，需要把&lt;strong&gt;父、叔节点变为黑色，并把祖父节点变为红色&lt;/strong&gt;，这样就保证了当前局部范围内红黑树性质能够被满足，但因为祖父节点被改变了颜色，所以事情还没完，需要&lt;strong&gt;递归&lt;/strong&gt;本步骤（即把祖父节点当做是插入的节点），直到到达根节点。&lt;/p&gt;

&lt;p&gt;这个步骤被称为&lt;strong&gt;Recoloring&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.10/4.png&quot; alt=&quot;4.png&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3b.叔节点是&lt;strong&gt;黑&lt;/strong&gt;色&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当处于这个情况下，根据&lt;strong&gt;父节点相对祖父节点的位置（Left or Right）和  插入节点相对父节点的位置（Left or Right）&lt;/strong&gt;，总共有四种细分状态：&lt;/p&gt;

&lt;p&gt;i) Left-Left&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.10/5.png&quot; alt=&quot;5.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;步骤：&lt;/p&gt;

&lt;p&gt;1）&lt;strong&gt;右&lt;/strong&gt;旋转g&lt;/p&gt;

&lt;p&gt;2）交换g和p的颜色&lt;/p&gt;

&lt;p&gt;ii) Right-Right&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.10/6.png&quot; alt=&quot;6.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;步骤：&lt;/p&gt;

&lt;p&gt;1）&lt;strong&gt;左&lt;/strong&gt;旋转g&lt;/p&gt;

&lt;p&gt;2）交换g和p的颜色&lt;/p&gt;

&lt;p&gt;可以注意到，整个步骤和Left-Left非常相似，其实就是Left-Left的水平镜像。&lt;/p&gt;

&lt;p&gt;iii) Left-Right&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.10/7.png&quot; alt=&quot;7.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;可以用一个旋转操作把这个case转换成Left-Left的case，步骤如下：&lt;/p&gt;

&lt;p&gt;1）&lt;strong&gt;左&lt;/strong&gt;旋转p&lt;/p&gt;

&lt;p&gt;iiii) Right-Left&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.10/8.png&quot; alt=&quot;8.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;可以用一个旋转操作把这个case转换成Right-Right的case，步骤如下：&lt;/p&gt;

&lt;p&gt;1）&lt;strong&gt;右&lt;/strong&gt;旋转p&lt;/p&gt;

&lt;h2&gt;资料&lt;/h2&gt;

&lt;p&gt;本文配图使用yEd编辑：&lt;a href=&quot;http://www.yworks.com/products/yed/download&quot;&gt;http://www.yworks.com/products/yed/download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/red-black-tree-set-2-insert/&quot;&gt;http://www.geeksforgeeks.org/red-black-tree-set-2-insert/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;红黑树测试程序：&lt;a href=&quot;https://www.cs.usfca.edu/%7Egalles/visualization/RedBlack.html&quot;&gt;https://www.cs.usfca.edu/~galles/visualization/RedBlack.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://www.qiujiawei.com/redblacktree-2/</link>
        <guid isPermaLink="true">http://www.qiujiawei.com/redblacktree-2/</guid>
      </item>
    
      <item>
        <title>细说红黑树(1)-核心定理</title>
        <description>&lt;p&gt;我一直觉得那些著名的数据结构，都是工程设计和数学的完美结合。&lt;/p&gt;

&lt;p&gt;所有的数据&lt;strong&gt;结构&lt;/strong&gt;都是被精心&lt;strong&gt;设计&lt;/strong&gt;出来的，此所谓工程设计。但是，既然叫精心设计，就意味着有一套准则，这个准则就是数学。&lt;/p&gt;

&lt;p&gt;没有数学基础的数据结构都是耍流氓。&lt;/p&gt;

&lt;p&gt;红黑树拥有精巧的结构设计和强大的数学基础，但我总觉得有点过于复杂，故写本文来回顾总结下。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1&gt;红黑树的定义&lt;/h1&gt;

&lt;p&gt;红黑树是一种特殊的二叉树，每个节点有颜色bit，要么红色要么黑色。红黑树必然满足以下4个&lt;strong&gt;结构上&lt;/strong&gt;的性质：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;根节点是黑色&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;叶子节点（NULL）视为黑色节点&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果一个节点是红色，那么它的2个孩子节点都是黑色&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于每条从根节点出发、并到达叶子节点的路径，路径上黑色节点的数量一致（叶子节点也计算在内）&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.10/1.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;这4个性质，稍微想一遍就知道是没有矛盾的。但是没有矛盾只是第一步，接着就是证明这4个性质为什么能使得红黑树变成牛逼的树。&lt;/p&gt;

&lt;p&gt;牛逼指的是这棵树很&lt;strong&gt;平衡&lt;/strong&gt;。平衡的定义是：设二叉树的节点数目为n，那么树的高度h和n必须满足：\( h = O(\log _{2}n)\)。这个就是要证明的东西。&lt;/p&gt;

&lt;h1&gt;红黑树的证明&lt;/h1&gt;

&lt;p&gt;所谓的证明，其实就是从上面的4个结构性质，分析出各种各样的数学上的性质，然后看下这些数学性质究竟能不能决定红黑树是不是平衡。&lt;/p&gt;

&lt;p&gt;若能够证明平衡，就可以抽丝剥茧，找出最关键的几条数学性质，就可以总结出一份简短的证明过程了。&lt;/p&gt;

&lt;p&gt;下面就是一份老外给出的最简单的证明过程。&lt;/p&gt;

&lt;h2&gt;定义BH(x)&lt;/h2&gt;

&lt;p&gt;首先需要定义一个函数BH(x)：x指红黑树的一个节点，BH(x)指这个x节点到叶子节点的路径上黑色节点的数量。&lt;/p&gt;

&lt;p&gt;根据上面的性质4，可以知道无论x走哪条路径到达叶子节点，BH(x)都一样。&lt;/p&gt;

&lt;h2&gt;2个引理&lt;/h2&gt;

&lt;h3&gt;引理1：对于以节点x为根节点的子树，设子树的总的节点数量n，那么有\( n \geq 2^{BH(x)} - 1  \)&lt;/h3&gt;

&lt;p&gt;要分2个情况来证明这个引理：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;树只有黑色节点。此时根据性质4，可以知道这树是完全二叉树，完全二叉树的节点数量等于\( 2^{h} - 1  \)，而h又等于BH(x)
。所以此种情况满足引理。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2.树有黑色也有红色节点。可以把这种情况视作第一种情况下的红黑树被添加了一些红色节点，根据性质1-4，可知道红色节点并不会影响BH(x)值。所以满足引理。&lt;/p&gt;

&lt;p&gt;综上，此引理没有问题。&lt;/p&gt;

&lt;h3&gt;引理2：设树的高度为h，那么有\( BH(root) \geq \frac {h} {2} \)&lt;/h3&gt;

&lt;p&gt;这个引理其实是在说，从根节点到叶子节点，黑色节点起码有高度的一半那么多。分2步来想：假如黑点节点数量是高度的一半，根据红黑树性质1-4，可以知道必然是黑红相间的排列方式：黑-红-黑-红 ···· ；当黑点节点数量是高度的一半再减一时，说明有一个黑色节点变红了，就说明出现了2个连在一起的红色节点了。就破坏了性质3。于是反证成功。&lt;/p&gt;

&lt;p&gt;另外一种思路：&lt;/p&gt;

&lt;p&gt;因为红黑树的性质3“红节点的2个孩子都是黑节点”，所以使得一条路径上红节点总数最大化的方法，必然是“黑(root)-红-黑-红-······-黑-红-黑-红-黑(leaf)”，注意，最后一个必然是叶子节点，根据性质2，这个叶子节点是黑节点，所以根据这个路径排列，就可以知道红节点必然比黑节点少，反而言之，黑节点数量必然大于等于高度的二分之一。&lt;/p&gt;

&lt;h3&gt;定理：任意一棵红黑树必然满足：\( h \leq 2log_{2}(n+1) \)&lt;/h3&gt;

&lt;p&gt;证明：&lt;/p&gt;

&lt;p&gt;根据引理1，有：&lt;/p&gt;

&lt;p&gt;\[  n \geq 2^{BH(root)} - 1 \]&lt;/p&gt;

&lt;p&gt;再因为引理2，有：&lt;/p&gt;

&lt;p&gt;\[  n \geq 2^{BH(root)} - 1 \geq 2^{\frac {h} {2}} - 1\]&lt;/p&gt;

&lt;p&gt;\[  n \geq 2^{\frac {h} {2}} - 1\]&lt;/p&gt;

&lt;p&gt;再变换一下：&lt;/p&gt;

&lt;p&gt;\[  n + 1 \geq 2^{\frac {h} {2}} \]&lt;/p&gt;

&lt;p&gt;\[  log_{2}(n + 1) \geq log_{2}2^{\frac {h} {2}} \]&lt;/p&gt;

&lt;p&gt;\[  log_{2}(n + 1) \geq \frac {h} {2} \]&lt;/p&gt;

&lt;p&gt;\[ h \leq 2log_{2}(n + 1)   \]&lt;/p&gt;

&lt;p&gt;得证。&lt;/p&gt;

&lt;p&gt;这个定理的重要性在于，它保证了红黑树是&lt;strong&gt;平衡&lt;/strong&gt;的。&lt;/p&gt;

&lt;h2&gt;总结&lt;/h2&gt;

&lt;p&gt;上面介绍的红黑树核心定理的证明过程，似乎并没有多么复杂。所以说伟大的东西往往不复杂是对的。&lt;/p&gt;

&lt;p&gt;红黑树和一般的二叉树相比，在空间上只是多了一个bit，这个特性对红黑树的实际运用非常棒；而围绕“red or black&amp;quot;设计出来的4个性质，恰好使得红黑树获得了最后的不等式，这个不等式使得红黑树和最理想的平衡二叉树也相差无几了。&lt;/p&gt;

&lt;p&gt;虽然红黑树能够简单地被理解，但是它的发明过程想必是不简单的，这需要天才般的想象力(红黑树只用一个标记位)和数学分析能力。也可以称为发明创造能力，这是不容易的。吾等只能膜拜大神。&lt;/p&gt;

&lt;p&gt;除了红黑树平衡性证明之外，还有别的算法设计工作要做，也就是红黑树的插入、删除、调整运算，必须足够快，不然实际价值就会降低。&lt;/p&gt;

&lt;p&gt;当然，上文只能证明红黑树&lt;strong&gt;在理论上的优秀&lt;/strong&gt;。如果在工程上能够实现这套理论，才算是完美的，然而实际上不那么简单（要正确实现红黑树的插入、删除、旋转操作啊）。下一篇文章前我会自己实现一遍红黑树，再写下心得体会。&lt;/p&gt;

&lt;h2&gt;参考资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.dgp.toronto.edu/people/JamesStewart/378notes/16redBlack/&quot;&gt;http://www.dgp.toronto.edu/people/JamesStewart/378notes/16redBlack/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://www.qiujiawei.com/redblacktree-1/</link>
        <guid isPermaLink="true">http://www.qiujiawei.com/redblacktree-1/</guid>
      </item>
    
      <item>
        <title>蒙特·卡罗(Monte Carlo)积分在图形学中的应用</title>
        <description>&lt;!--more--&gt;

&lt;h1&gt;计算着色点的间接光照&lt;/h1&gt;

&lt;p&gt;在计算一个着色点的间接光照时，理论上可以通过从着色点往上半球各个方向发射无数条光线，并计算这些光线返回的Rdiance值，就可以得到这个着色点的间接光照。但因为计算机的计算速度问题，不可能给一个着色点生成“无数”条光线，在工程实现上必然是得做成有限数量的光线，且很悲哀的，这个数量值不会很大。&lt;/p&gt;

&lt;p&gt;那么如何用有限的光线，得到最真实的间接光照值呢？答案是用蒙特·卡罗积分。蒙特·卡罗积分的特性是，采样数越多就越接近真实积分值，而这正是做间接光照计算所需要的。譬如我们可以根据实际需求，设置采样数量，数量大就出图慢、精度高，数量小就出图快但粗糙。&lt;/p&gt;

&lt;p&gt;下面开始数学环节。&lt;/p&gt;

&lt;h2&gt;计算间接光照的蒙特·卡罗方法&lt;/h2&gt;

&lt;p&gt;生成间接光照的各个光线时，需要有一个随机变量\(\omega \)，这个随机变量就是光线的“出射角度”，更严格地说应该是“&lt;a href=&quot;http://www.qiujiawei.com/solid-angle/&quot;&gt;立体角&lt;/a&gt;”。&lt;/p&gt;

&lt;p&gt;对于一个半球，它的总立体角是2π，那么关于\(\omega \)的pdf函数记为\(p(\omega ) \)，而在上一篇文章中我们知道pdf的积分等于1，所以有：&lt;/p&gt;

&lt;p&gt;\[ \int _{\omega = 0 }^{2π}p(\omega )d\omega = 1 \]&lt;/p&gt;

&lt;p&gt;又因为我们希望\(\omega \)是符合均匀分布的，从而使得间接光照采样是概率无偏的，那么\(p(\omega ) \)是一个常数：&lt;/p&gt;

&lt;p&gt;\[ p(\omega ) = C \]&lt;/p&gt;

&lt;p&gt;\[ C\int _{\omega = 0 }^{2π}d\omega = 1 \]&lt;/p&gt;

&lt;p&gt;这个方程是可以解出来的:&lt;/p&gt;

&lt;p&gt;\[ C\int _{\omega = 0 }^{2π}d\omega = C(2π - 0 ) =  1 \]&lt;/p&gt;

&lt;p&gt;\[  p(\omega ) = C = \frac {1}{2π} \]&lt;/p&gt;

&lt;p&gt;成功解决了第一个事情：&lt;strong&gt;随机变量\(\omega \)的pdf函数&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;下一个问题是：&lt;strong&gt;把立体角\(\omega \)转换成球形角\(\phi 、\theta  \)，从而方便实际计算&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;\[  p(\omega ) d\omega =  p(\theta , \phi) d\theta d\phi \]&lt;/p&gt;

&lt;p&gt;其中，\(d\omega \)的转换方法在&lt;a href=&quot;http://www.qiujiawei.com/solid-angle/&quot;&gt;立体角(Solid Angle)详解&lt;/a&gt;中已经阐述过了，公式为：&lt;/p&gt;

&lt;p&gt;\[ d\omega = sin\theta d\theta d\phi \]&lt;/p&gt;

&lt;p&gt;所以有：&lt;/p&gt;

&lt;p&gt;\[  p(\omega ) d\omega =  p(\theta , \phi) d\theta d\phi \]&lt;/p&gt;

&lt;p&gt;\[  p(\omega ) sin\theta d\theta d\phi =  p(\theta , \phi) d\theta d\phi \]&lt;/p&gt;

&lt;p&gt;\[  \frac {1}{2π} sin\theta d\theta d\phi =  p(\theta , \phi) d\theta d\phi \]&lt;/p&gt;

&lt;p&gt;\[  \frac {1}{2π} sin\theta  =  p(\theta , \phi)  \]&lt;/p&gt;

&lt;p&gt;\[  p(\theta , \phi) = \frac {sin\theta}{2π}  \]&lt;/p&gt;

&lt;p&gt;\( p(θ,ϕ)\) 被称为联合概率分布(joint probability distribution)。此时，我们需要实现对θ,ϕ各自的独立采样，所以需要把\( p(θ,ϕ)\)拆分开，求出\( p(θ)\) 和 \( p(ϕ) \)。幸运地是，有简单的方法可以实现同样的效果，那就是用&lt;a href=&quot;https://en.wikipedia.org/wiki/Marginal_distribution&quot;&gt;边缘分布(marginal distribution)&lt;/a&gt;。计算过程如下：&lt;/p&gt;

&lt;p&gt;\[ p(θ) = \int _{\phi = 0}^{2π}p(θ,ϕ)d\phi = \int _{\phi = 0}^{2π}\frac {sin\theta}{2π}d\phi = 2π \frac {sin\theta}{2π} =sin\theta \]&lt;/p&gt;

&lt;p&gt;\[ p(ϕ) = \int _{θ = 0}^{ \frac {π}{2} }p(θ,ϕ)dθ = \int _{ θ = 0}^{ \frac {π}{2} }\frac {sin\theta}{2π}dθ = \frac {-cos\theta}{2π} | _{0}^{\frac {π}{2}}= \frac {-cos \frac {π}{2} }{2π} - \frac {-cos0 }{2π} = \frac {1}{2π} \]&lt;/p&gt;

&lt;p&gt;\(p(ϕ)\)也可以用联合概率公式来求解：&lt;/p&gt;

&lt;p&gt;\[ p(ϕ) =\frac {p(θ,ϕ)}{p(θ)} =  \frac { \frac {sin\theta}{2π}  }{ sin\theta }  = \frac {1}{2π} \]&lt;/p&gt;

&lt;p&gt;到了这里，事情还没完，还有2个东西要学习：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cumulative_distribution_function&quot;&gt;CDF, Cumulative distribution function&lt;/a&gt; 和 &lt;a href=&quot;https://en.wikipedia.org/wiki/Inverse_transform_sampling&quot;&gt;Inverse transform sampling&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;CDF 累积分布函数&lt;/h2&gt;

&lt;p&gt;公式如下：&lt;/p&gt;

&lt;p&gt;\[ CDF(x) = P( -\infty &amp;lt; X \leq x ) \]&lt;/p&gt;

&lt;p&gt;大写X是指随机变量，小写x指的是参数，P是概率函数，因此CDF(x)的含义是，&lt;strong&gt;随机变量X的值小于等于x的概率&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;对于连续随机变量X，CDF可以用积分形式表示：&lt;/p&gt;

&lt;p&gt;\[ CDF(s) = \int _{-\infty }^{s}pdf(x)dx \]&lt;/p&gt;

&lt;p&gt;从基本定义延伸出来的公式：&lt;/p&gt;

&lt;p&gt;\[ P(a &amp;lt; x \leq b) = CDF(b) - CDF(a) = \int _{ a }^{b}pdf(x)dx  \]&lt;/p&gt;

&lt;p&gt;CDF的性质：&lt;/p&gt;

&lt;p&gt;\[ \lim _{x\to -\infty }CDF(x) = 0 \]&lt;/p&gt;

&lt;p&gt;\[ \lim _{x\to +\infty }CDF(x) = 1 \]&lt;/p&gt;

&lt;p&gt;实例，取值范围是[0,1]的随机变量X的CDF：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.8/5.png&quot; alt=&quot;5.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;CDF一般也可以用\(F_{X}\)表示。&lt;/p&gt;

&lt;h2&gt;Inverse transform sampling 逆采样方法&lt;/h2&gt;

&lt;p&gt;步骤一：获得一个均布分布的随机变量u，这个u必须落在[0,1]范围内，并把这个u解释为“概率值”（概率的范围也是[0,1])。&lt;/p&gt;

&lt;p&gt;步骤二：获得一个CDF(x)函数&lt;/p&gt;

&lt;p&gt;步骤三：计算使得下面的不等式成立的x的最大值：&lt;/p&gt;

&lt;p&gt;\[ CDF(x) = P( -\infty &amp;lt; X \leq x ) = F_{X}(x) &amp;lt; u \]&lt;/p&gt;

&lt;p&gt;因为&lt;strong&gt;逆采样&lt;/strong&gt;本质上是一个函数，变量是u，解是x，所以用这个不等式来表达逆采样方法是不方便的，更常见的做法是用\(F_{X}^{-1}(u) \)来表示&lt;strong&gt;逆采样&lt;/strong&gt;。\(F_{X}^{-1}(u) \)的完整表达式一般用&lt;a href=&quot;https://en.wikipedia.org/wiki/Infimum_and_supremum&quot;&gt;下确界或上确界&lt;/a&gt;等式表示：&lt;/p&gt;

&lt;p&gt;上确界形式：&lt;/p&gt;

&lt;p&gt;\[ F_{X}^{-1}(u) = \sup \lbrace F_{X}(x) &amp;lt; u \rbrace \]&lt;/p&gt;

&lt;p&gt;下确界形式：&lt;/p&gt;

&lt;p&gt;\[ F_{X}^{-1}(u) = \inf \lbrace F_{X}(x) \geq u \rbrace \]&lt;/p&gt;

&lt;p&gt;\(F_{X}^{-1}(u) \)的重要性质：u的每一个取值都有唯一的x与之对应。使得这个性质的原因是CDF是一个递增的函数。&lt;/p&gt;

&lt;p&gt;因此，在实际应用中，可以先随机一个u，再通过CDF函数计算出对应的x，又因为u是均匀采样(uniform sample)的，于是x也是均匀采样的。&lt;/p&gt;

&lt;h2&gt;再回到间接光照的问题&lt;/h2&gt;

&lt;p&gt;前面已经得到了\( p(θ)\) 和 \( p(ϕ) \):&lt;/p&gt;

&lt;p&gt;\[ p(θ) = sin\theta \]&lt;/p&gt;

&lt;p&gt;\[ p(ϕ) = \frac {1}{2π} \]&lt;/p&gt;

&lt;p&gt;现在可以推导它们的CDF函数了：&lt;/p&gt;

&lt;p&gt;\[ CDF(θ) = \int _{0 }^{θ}p(θ)dθ = \int _{0 }^{θ}sin\theta dθ = (-cos\theta) |_{0}^{θ}  = -cos\theta - (-cos0) = 1 - cos\theta \]&lt;/p&gt;

&lt;p&gt;\[ CDF(ϕ) = \int _{0 }^{ϕ}p(ϕ)dϕ = \int _{0 }^{ϕ}\frac {1}{2π}dϕ = \frac {1}{2π}\int _{0 }^{ϕ}dϕ = \frac {ϕ}{2π} \]&lt;/p&gt;

&lt;p&gt;即：&lt;/p&gt;

&lt;p&gt;\[ F_{θ}(θ) = 1 - cos\theta  \]&lt;/p&gt;

&lt;p&gt;\[ F_{ϕ}(ϕ) = \frac {ϕ}{2π} \]&lt;/p&gt;

&lt;p&gt;然后就是推导这两个CDF的逆采样公式，设：&lt;/p&gt;

&lt;p&gt;\[ u_{1} = 1 - cos\theta \]&lt;/p&gt;

&lt;p&gt;\[ cos\theta = 1 - u_{1}  \]&lt;/p&gt;

&lt;p&gt;\[ \theta = cos^{-1}(1 - u_{1})  \]&lt;/p&gt;

&lt;p&gt;即：&lt;/p&gt;

&lt;p&gt;\[ F_{θ}^{-1}(u_{1}) = cos^{-1}(1 - u_{1}) \]&lt;/p&gt;

&lt;p&gt;再设：&lt;/p&gt;

&lt;p&gt;\[ u_{2} = \frac {ϕ}{2π} \]&lt;/p&gt;

&lt;p&gt;\[ ϕ = u_{2}2π  \]&lt;/p&gt;

&lt;p&gt;即：&lt;/p&gt;

&lt;p&gt;\[ F_{ϕ}^{-1}(u_{2}) =  u_{2}2π   \]&lt;/p&gt;

&lt;p&gt;汇总一下：&lt;/p&gt;

&lt;p&gt;\[ F_{θ}^{-1}(u_{1}) = cos^{-1}(1 - u_{1}) \]&lt;/p&gt;

&lt;p&gt;\[ F_{ϕ}^{-1}(u_{2}) =  u_{2}2π   \]&lt;/p&gt;

&lt;p&gt;总结一下：只要生成2个在[0,1]范围的符合均匀分布的随机数\( u_{1}、u_{2}\)，就可以得到均匀分布的\(θ、ϕ\)了，就是这么简单。&lt;/p&gt;

&lt;p&gt;有了\(θ、ϕ\)后，就可以代入3维的极坐标公式，得到3维的笛卡尔坐标：&lt;/p&gt;

&lt;p&gt;\[ x= sinθ cosϕ \]&lt;/p&gt;

&lt;p&gt;\[ y= cosθ \]&lt;/p&gt;

&lt;p&gt;\[ z= sinθ sinϕ \]&lt;/p&gt;

&lt;p&gt;坐标(x,y,z)必然落在圆心在原点、半径为1、法向量为(0,1,0)的半球的球面。&lt;/p&gt;

&lt;p&gt;有了(x,y,z)坐标，就可以生成沿着半球面的均匀的出射光线了。之后的就是光线追踪的问题了。本文不表。&lt;/p&gt;

&lt;h1&gt;实际测试&lt;/h1&gt;

&lt;p&gt;把蒙特卡洛应用到我的离线渲染器中，效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.9/1.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;有看起来比较奇怪的边缘噪点。暂时先这样吧。&lt;/p&gt;

&lt;h1&gt;参考资料&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.scratchapixel.com/lessons/3d-basic-rendering/global-illumination-path-tracing/global-illumination-path-tracing-practical-implementation&quot;&gt;http://www.scratchapixel.com/lessons/3d-basic-rendering/global-illumination-path-tracing/global-illumination-path-tracing-practical-implementation&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://www.qiujiawei.com/monte-carlo2/</link>
        <guid isPermaLink="true">http://www.qiujiawei.com/monte-carlo2/</guid>
      </item>
    
      <item>
        <title>蒙特·卡罗(Monte Carlo)积分详解</title>
        <description>&lt;!--more--&gt;

&lt;h2&gt;蒙特·卡罗积分公式&lt;/h2&gt;

&lt;p&gt;对于一个连续函数f，它的积分公式为：&lt;/p&gt;

&lt;p&gt;\[ F = \int _{a}^{b}f(x)dx \]&lt;/p&gt;

&lt;p&gt;对应的，f的&lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_integration&quot;&gt;蒙特·卡罗积分公式&lt;/a&gt;如下：&lt;/p&gt;

&lt;p&gt;\[ F^{N} = \frac {1}{N}\sum _{i=1}^{N}\frac {f(X_{i})}{ pdf(X_{i}) } \]&lt;/p&gt;

&lt;p&gt;蒙特卡罗最关键的就是理解这条公式了。其他延伸探讨都可以暂时忽略。那么这条公式如何理解呢？首先第一点是，虽然这条公式没有积分符号\(\int  \)，但是它认被称为&lt;strong&gt;积分&lt;/strong&gt;，这是因为这公式的作用相当于在对f(x)做积分，只不过不那么“精确”，即蒙特·卡罗积分是&lt;strong&gt;对理想积分的近似&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;那么这个近似是如何完成的？很简单，核心就是两个字：&lt;strong&gt;采样(Sampling)&lt;/strong&gt;。对一个连续函数的采样方法是在该函数的定义域中随机挑N个值，并求出对应的N个\( f(X_{i}) \)，就得到了样本集合。再对这些样本集合做一些换算，就可以得到一个近似的积分了。对于蒙特·卡罗积分，&lt;strong&gt;采样样本越多，就越逼近真实的积分结果&lt;/strong&gt;，这是蒙特·卡罗积分的最核心特性。&lt;/p&gt;

&lt;p&gt;继续观察上面的公式，里面还有一个极其重要的参数：pdf(probability distribution function，概率分布函数)。pdf还有个近亲pmf，下面小节详解pdf、pmf的由来。&lt;/p&gt;

&lt;h2&gt;pdf和pmf&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;pmf(probability mass function)，指的是&lt;strong&gt;离散的&lt;/strong&gt;随机变量的概率分布函数&lt;/li&gt;
&lt;li&gt;pdf(probability distribution function)， 指的是&lt;strong&gt;连续的&lt;/strong&gt;随机变量的概率分布函数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;离散的随机变量X的数学期望为：&lt;/p&gt;

&lt;p&gt;\[E[X] = \sum _{ x_{i} }pmf(x_{i})x_{i} \]&lt;/p&gt;

&lt;p&gt;连续的随机变量X的数学期望为：&lt;/p&gt;

&lt;p&gt;\[E[X] = \int ^{\infty }_{-\infty }pdf(x)xdx \]&lt;/p&gt;

&lt;p&gt;pdf和pmf名字接近，含义也是接近。pdf、pmf函数的参数都是样本值x，返回值是概率，即表示一个样本出现的概率，所有样本的出现概率之和(概率的积分)应等于1。要注意的是，pdf、pmf的存在说明有可能每个样本的出现概率都是各不相同的。&lt;/p&gt;

&lt;h3&gt;pmf&lt;/h3&gt;

&lt;p&gt;pmf的简单例子就是&lt;strong&gt;基于均匀分布的离散的随机变量X&lt;/strong&gt;，此时\( pmf(X_{i}) \)恒等于\( \frac{1}{N} \)，含义是每个随机样本的出现概率等于\( \frac{1}{样本总数} \)。&lt;/p&gt;

&lt;p&gt;通过这个例子也印证了pmf的性质：&lt;strong&gt;pmf函数的所有结果值之和等于1&lt;/strong&gt;。&lt;/p&gt;

&lt;h3&gt;pdf&lt;/h3&gt;

&lt;p&gt;借用&lt;a href=&quot;http://www.scratchapixel.com/&quot;&gt;http://www.scratchapixel.com/&lt;/a&gt;的一个很好的例子来说明：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.8/1.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;这个例子中，目标问题是求出该函数[a,b]段曲线下方的面积(最后一幅图的黑色区域)，也就是要求该函数[a,b]段的积分。基于蒙特·卡罗积分的解法，就要用上面给出的公式：&lt;/p&gt;

&lt;p&gt;\[ F^{N} = \frac {1}{N}\sum _{i=1}^{N}\frac {f(X_{i})}{ pdf(X_{i}) } \]&lt;/p&gt;

&lt;p&gt;在此图中，做了四次随机采样，得到了四个随机样本\( x_{i} \)：\( x_{1}、x_{2}、x_{3}、x_{4} \)，并且进而得到了这四个样本的\( f(x_{i}) \)值：\( f(x_{1})、f(x_{2})、f(x_{3})、f(x_{4}) \)。（原文没有提及如何得到\( f(x_{i}) \)。函数f是奇形怪状的，不太可能有表达式存在，难道是用尺子量的？暂且忽略这个事吧。）&lt;/p&gt;

&lt;p&gt;有了这4个样本后，可以针对每一个样本求一个&lt;strong&gt;近似面积值&lt;/strong&gt;，这个面积值等于\( f(x_{i})  (b - a) \)。为什么可以这样做呢？是因为每一个单独的样本是对原函数f的近似，即在每个样本中，认为\( f(x) \)恒等于\( f(x_{i}) \)，从而让原函数曲线简化成一个矩形区域，而矩形的面积显然就是长(b-a)乘以宽\( f(x_{i}) \)。&lt;/p&gt;

&lt;p&gt;得到4个&lt;strong&gt;近似面积值&lt;/strong&gt;后，再求出它们的均值(数学期望)，就完成了蒙特·卡罗积分。把上述流程汇总得到：&lt;/p&gt;

&lt;p&gt;\[ Area = \frac {1}{4}(f(x_{1})(b - a) + f(x_{2})(b - a) + f(x_{3})(b - a) + f(x_{4})(b - a)) \]&lt;/p&gt;

&lt;p&gt;\[ = \frac {1}{4}(b - a)( f(x_{1}) + f(x_{2}) + f(x_{3}) + f(x_{4}) ) \]&lt;/p&gt;

&lt;p&gt;\[ = \frac {1}{4}(b - a)\sum _{i=1}^{4}f(x_{i}) \]&lt;/p&gt;

&lt;p&gt;此时，对比下蒙特·卡罗积分公式：&lt;/p&gt;

&lt;p&gt;\[ F^{N} = \frac {1}{N}\sum _{i=1}^{N}\frac {f(X_{i})}{ pdf(X_{i}) } \]&lt;/p&gt;

&lt;p&gt;发现两个式子非常相似，对式子做下转换得到：&lt;/p&gt;

&lt;p&gt;\[ Area =  \frac {1}{4}\sum _{i=1}^{4}\frac {f(x_{i})}{\frac {1}{b - a} } \]&lt;/p&gt;

&lt;p&gt;于是可以知道\( pdf(x_{i}) \)等于：&lt;/p&gt;

&lt;p&gt;\[ pdf(x_{i}) = \frac {1}{b - a } \]&lt;/p&gt;

&lt;p&gt;这意味着，对于连续函数f，f的每个可能取值x的出现概率等于x的取值范围[a,b]的倒数\(\frac{1}{b-a}\)。&lt;/p&gt;

&lt;p&gt;在实际应用场合，随机变量X要写成F(X)，即可能需要对X做一个转换再使用。这时候要注意F(X)的pdf不等于X的pdf。&lt;/p&gt;

&lt;h2&gt;蒙特·卡罗积分的数学期望等于理想积分？&lt;/h2&gt;

&lt;p&gt;对于下面的\(F\)和\(F^{N}\)：&lt;/p&gt;

&lt;p&gt;\[ F = \int _{a}^{b}f(x)dx \]&lt;/p&gt;

&lt;p&gt;\[ F^{N} = \frac {1}{N}\sum _{i=1}^{N}\frac {f(X_{i})}{ pdf(X_{i}) } \]&lt;/p&gt;

&lt;p&gt;是否随着N变大，\(F^{N}\)会逼近\(F\)？即\(F^{N}\)的数学期望是否等于\(F\)?&lt;a href=&quot;http://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/monte-carlo-methods-in-practice/monte-carlo-integration&quot;&gt;Monte Carlo Methods in Practice&lt;/a&gt;文章中给出了推导过程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.8/2.png&quot; alt=&quot;2.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;第二行到第三行是最不好理解的。因为这里其实用到了新的知识点：&lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_the_unconscious_statistician&quot;&gt;Law of the unconscious statistician&lt;/a&gt;(简称：LOTUS)。LOTUS的应用情景是，已知随机变量X的概率分布，但不知道f(x)的分布，此时用LOTUS公式能计算出函数f(x)的数学期望。LOTUS的公式如下：&lt;/p&gt;

&lt;p&gt;f(x)是离散函数时:&lt;/p&gt;

&lt;p&gt;\[ E[f(X)] = \sum _{x_{i}}f(x_{i})pmf(x_{i}) \]&lt;/p&gt;

&lt;p&gt;f(x)是连续函数时:&lt;/p&gt;

&lt;p&gt;\[ E[f(X)] = \int _{-\infty }^{\infty}f(x)pdf(x)dx \]&lt;/p&gt;

&lt;p&gt;(建议对比第二小节开头的两条公式来理解)&lt;/p&gt;

&lt;p&gt;有了LOTUS公式，再来看第二行到第三行的转换，就好理解了：&lt;/p&gt;

&lt;p&gt;\[ E[ \frac {f(X_{i})}{pdf(X_{i})} ] = E[ \frac {f(x)}{pdf(x)} ] =\int _{-\infty }^{\infty}\frac {f(x)}{pdf(x)}pdf(x)dx \]&lt;/p&gt;

&lt;p&gt;\[ =\int _{-\infty }^{\infty}f(x)dx \]&lt;/p&gt;

&lt;h1&gt;参考资料&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/monte-carlo-methods-in-practice/monte-carlo-integration&quot;&gt;http://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/monte-carlo-methods-in-practice/monte-carlo-integration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/monte-carlo-methods-mathematical-foundations/expected-value-of-the-function-of-a-random-variable&quot;&gt;http://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/monte-carlo-methods-mathematical-foundations/expected-value-of-the-function-of-a-random-variable&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://www.qiujiawei.com/monte-carlo/</link>
        <guid isPermaLink="true">http://www.qiujiawei.com/monte-carlo/</guid>
      </item>
    
      <item>
        <title>渲染基础理论的介绍(2)——工程实现</title>
        <description>&lt;!--more--&gt;

&lt;h2&gt;从SPD到XYZ&lt;/h2&gt;

&lt;p&gt;在上一篇文章中，已经提到了SPD需要转换成XYZ值，才能进一步转换成RGB从而变成位图。这里面的工程实现还是需要学习一下的。&lt;/p&gt;

&lt;p&gt;首先，先回顾下三色XYZ三色刺激值(tristimulus vlaues)的图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.7/14.png&quot; alt=&quot;14.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;这个图怎么用到程序里呢？方法就是打表，图中有3个函数\( \hat {x}(\lambda ) 、 \hat {y}(\lambda ) 、 \hat {z}(\lambda )\)，可以建立4个数组来表示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//切片数&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nCIESamples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;471&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//存了λ值的数组，范围是从360到830，即可见光波段&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CIE_lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nCIESamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;361&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;362&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;363&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;364&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;366&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;367&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;368&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;369&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;370&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;371&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;372&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;373&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;374&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;······&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;825&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;826&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;827&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;828&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;829&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;830&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//下面三个数组的元素的取值范围是[0.0, 2.0]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//hat(x)函数&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CIE_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nCIESamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.0001299000f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;0.0001458470f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;0.0001638021f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;0.0001840037f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;······&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.000001439440f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.000001341977f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.000001251141f&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//hat(y)函数&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CIE_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nCIESamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.000003917000f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.000004393581f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;0.000004929604f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.000005532136f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;······&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.0000005198080f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0000004846123f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0000004518100f&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//hat(z)函数&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CIE_Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nCIESamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.0006061000f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0006808792f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0007651456f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0008600124f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;······&lt;/span&gt;
    &lt;span class=&quot;mf&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0f&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为\( \hat {x}(\lambda ) 、 \hat {y}(\lambda ) 、 \hat {z}(\lambda )\)是常量（和万有引力常数一样的常数）,所以上面的4个数组只需要制作一次就行了，然后可以把它们硬编码到你的程序里(pbrt就是这么干的)。&lt;/p&gt;

&lt;h2&gt;SPD数据源&lt;/h2&gt;

&lt;p&gt;SPD数据源如何获得暂且不提，这里关注的是SPD数据源的存放格式：它应该是一个序列，序列中的元素是一个tuple，tuple里存了2个元素，一是λ值，二是v值，代表眼睛-光谱敏感度(spectral sensitivity)，后者一般是一个单位化的值(0.0到1.0之间):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//n由数据提供方给出&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;···&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;从SPD转换到XYZ到RGB&lt;/h2&gt;

&lt;p&gt;先贴上pbrt的实现代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//pbrt-v2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RGBSpectrum&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FromSampled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//part I&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nCIESamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;yint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CIE_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterpolateSpectrumSamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                               &lt;span class=&quot;n&quot;&gt;CIE_lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CIE_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CIE_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CIE_Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//part II&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//part III&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FromXYZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该函数的参数分别是SPD曲线的λ值、v值、λ-v对数(即采样次数)，这3者确定了一条离散的SPD曲线；该函数的返回值就是一个RGB值。&lt;/p&gt;

&lt;p&gt;可以把这个函数分成3部分来阅读理解。&lt;/p&gt;

&lt;p&gt;part I是其中最关键的，这个for循环计算出了xyz各个分量的值，循环次数和nCIESamples一致，每次循环需要执行一个InterpolateSpectrumSamples函数得到一个val值(这个val是波长!)，再把这个val值分别和CIE_X、CIE_Y、CIE_Z相乘，并累加到xyz数组里。这个步骤其实就是下面的公式：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.7/15.png&quot; alt=&quot;15.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;的离散版本:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.7/16.png&quot; alt=&quot;16.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;InterpolateSpectrumSamples做的事情也不复杂。因为SPD的n值和nCIESamples不一定一样，也就是说不可能SPD和XYZ表的切片刚好一致，所以必然要做线性插值，从而把SPD切片数据转换成可用数据。具体转换过程看pbrt源码即可。&lt;/p&gt;

&lt;p&gt;part II是把xyz规范化(Normalize)的过程。part I 加上 part II总的公式如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.7/24.png&quot; alt=&quot;24.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;part III做的事情就是把XYZ转换成RGB，公式在上一篇文章已经给出了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.7/17.png&quot; alt=&quot;17.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;对应的代码如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XYZToRGB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.240479f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.537150f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.498535f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.969256f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.875991f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.041556f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.055648f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.204043f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.057311f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，这里得到的RGB是线性空间的RGB，并没有做gamma校正。gamma校正的公式如下:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.7/21.png&quot; alt=&quot;21.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;gamma校正应放在【线性空间】到【非线性空间】的转换时做，也就是最后输出时。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//gamma校正&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GammaCorrect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0031308f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;12.92f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.055f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.4f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.055f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;//Clamp函数&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;//RGB_linear转成sRGB&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GammaCorrect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;255.f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GammaCorrect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;255.f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GammaCorrect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;255.f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;

&lt;p&gt;pbrt源码&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://www.qiujiawei.com/rendering-equation2/</link>
        <guid isPermaLink="true">http://www.qiujiawei.com/rendering-equation2/</guid>
      </item>
    
      <item>
        <title>记录c++一些神奇的报错</title>
        <description>&lt;!--more--&gt;

&lt;h2&gt;Heap Corruption Deteched&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../images/2016.7/10.png&quot; alt=&quot;10.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;这个报错发生在main函数返回时。出错原因是在堆数组的赋值上。&lt;/p&gt;

&lt;p&gt;先是初始化一个数组指针：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后循环赋值：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，这个循环溢出了，这个循环对array[100]进行了赋值，即数组的第101个元素，而数组长度只有100。&lt;/p&gt;

&lt;p&gt;然后再执行delete[] array就会出上面截图那个报错了。&lt;/p&gt;

&lt;p&gt;修了那个循环次数就没事了，就酱。&lt;/p&gt;

&lt;h2&gt;error C2338: tuple_element index out of bounds&lt;/h2&gt;

&lt;p&gt;参考了这篇文章 &lt;a href=&quot;http://www.cnblogs.com/fengyubo/p/4866623.html&quot;&gt;http://www.cnblogs.com/fengyubo/p/4866623.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其实就是placeholders::_1 placeholders::_2 这些填错了。&lt;/p&gt;

&lt;h2&gt;从mac拷贝git目录到windows后出现无法丢弃的修改&lt;/h2&gt;

&lt;p&gt;git config core.filemode false
git config core.eol lf&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.qiujiawei.com/c++-error-solved/</link>
        <guid isPermaLink="true">http://www.qiujiawei.com/c++-error-solved/</guid>
      </item>
    
  </channel>
</rss>